{"ast":null,"code":"var _jsxFileName = \"D:\\\\coding\\\\project\\\\career-advisory-website\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for existing user session in localStorage\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    setLoading(true);\n    try {\n      // Mock authentication - in real app, this would call Firebase Auth\n      const mockUser = {\n        id: Date.now().toString(),\n        email,\n        name: email.split('@')[0]\n      };\n      setUser(mockUser);\n      localStorage.setItem('user', JSON.stringify(mockUser));\n    } catch (error) {\n      throw new Error('Login failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async (email, password, name) => {\n    setLoading(true);\n    try {\n      // Mock registration - in real app, this would call Firebase Auth\n      const mockUser = {\n        id: Date.now().toString(),\n        email,\n        name\n      };\n      setUser(mockUser);\n      localStorage.setItem('user', JSON.stringify(mockUser));\n    } catch (error) {\n      throw new Error('Registration failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n  const updateProfile = profileData => {\n    if (user) {\n      const updatedUser = {\n        ...user,\n        ...profileData\n      };\n      setUser(updatedUser);\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n    }\n  };\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    updateProfile,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","savedUser","localStorage","getItem","JSON","parse","login","email","password","mockUser","id","Date","now","toString","name","split","setItem","stringify","error","register","logout","removeItem","updateProfile","profileData","updatedUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/coding/project/career-advisory-website/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n  age?: number;\n  academicLevel?: string;\n  location?: string;\n  interests?: string[];\n  strengths?: string[];\n  quizCompleted?: boolean;\n  recommendedStream?: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string, name: string) => Promise<void>;\n  logout: () => void;\n  updateProfile: (profileData: Partial<User>) => void;\n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for existing user session in localStorage\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (email: string, password: string): Promise<void> => {\n    setLoading(true);\n    try {\n      // Mock authentication - in real app, this would call Firebase Auth\n      const mockUser: User = {\n        id: Date.now().toString(),\n        email,\n        name: email.split('@')[0],\n      };\n      setUser(mockUser);\n      localStorage.setItem('user', JSON.stringify(mockUser));\n    } catch (error) {\n      throw new Error('Login failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (email: string, password: string, name: string): Promise<void> => {\n    setLoading(true);\n    try {\n      // Mock registration - in real app, this would call Firebase Auth\n      const mockUser: User = {\n        id: Date.now().toString(),\n        email,\n        name,\n      };\n      setUser(mockUser);\n      localStorage.setItem('user', JSON.stringify(mockUser));\n    } catch (error) {\n      throw new Error('Registration failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n\n  const updateProfile = (profileData: Partial<User>) => {\n    if (user) {\n      const updatedUser = { ...user, ...profileData };\n      setUser(updatedUser);\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    login,\n    register,\n    logout,\n    updateProfile,\n    loading,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}